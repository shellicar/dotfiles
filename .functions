git_main() {
  # Fetch and prune branches
  echo "Fetching"
  if git fetch -p; then
    # Check if 'main' branch exists on remote
    if git ls-remote --heads origin main | grep 'refs/heads/main' >/dev/null; then
      target_branch="main"
    elif git ls-remote --heads origin master | grep 'refs/heads/master' >/dev/null; then
      # Fallback to 'master' if 'main' does not exist
      target_branch="master"
    else
      echo "Neither 'main' nor 'master' branch exists on remote."
      return 1
    fi
    echo "Target branch: $target_branch"

    # Get the current branch name
    current_branch=$(git branch --show-current)
    echo "Current branch: $current_branch"

    # Check if the current branch is 'main'
    if [ "$current_branch" = "$target_branch" ]; then
      # Pull the latest changes on 'main'
      echo "Pulling"
      git pull
    else
      # Check if 'main' branch exists locally
      if git rev-parse --verify $target_branch >/dev/null 2>&1; then
        # Delete 'main' branch if it exists
        echo "Deleting target branch"
        git branch -d $target_branch
      fi
      # Checkout 'main' branch
      echo "Checking out target branch"
      git checkout $target_branch --
    fi
  else
    echo "Failed to fetch branches."
  fi
}

pkg_size(){
	apk info -es $(apk info -a) | \
    sed -e ':a' -e 'N' -e '$!ba' -e 's/\n\([0-9]\)/\1/g' | \
    sed -e ':a' -e 'N' -e '$!ba' -e 's/\n\n/\n /g' | \
    sed 's/\(.*\):\([0-9]*\)/\2 \1/g' | \
    sort -n
}

tm(){
    if [ $# -eq 0 ]; then
        if tmux list-s; then
            tmux a
        else
            tmux
        fi
    else
        tmux "$@"
    fi
}

remove_bom() {
    find . -type f -not -path '*/.git/*' -print0 | \
    xargs -0 grep -rl $'^\xEF\xBB\xBF' | \
    xargs -d '\n' sed -i '1s/^\xEF\xBB\xBF//'
}

tmuxa() {
  if [[ -n "$1" ]]; then
    session_match="$(tmux ls -F '#{session_name}' | grep -i "$1" | head -n 1)"
  else
    session_match="$(tmux ls -F '#{session_name}' | head -n 1)"
  fi

  if [[ -n "$session_match" ]]; then
    if [[ -n "$TMUX" ]]; then
      tmux switch-client -t "$session_match"
    else
      tmux a -t "$session_match"
    fi
  else
    echo "No matching session found."
    return 1
  fi
}
